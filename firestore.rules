rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(ownerId) {
      return isSignedIn() && request.auth.uid == ownerId;
    }

    function isOrgMember(orgId) {
      let org = get(/databases/$(database)/documents/organizations/$(orgId));
      return isSignedIn() && 
             exists(/databases/$(database)/documents/organizations/$(orgId)) &&
             org.data.members != null &&
             request.auth.uid in org.data.members;
    }

    // Allow access to videos collection
    match /videos/{videoId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && 
                   isOrgMember(request.resource.data.organizationId);
      allow update: if isSignedIn() && 
                   isOrgMember(resource.data.organizationId) &&
                   (resource.data.userId == request.auth.uid || 
                    request.auth.uid in get(/databases/$(database)/documents/organizations/$(resource.data.organizationId)).data.members);
      allow delete: if isSignedIn() && 
                   isOrgMember(resource.data.organizationId) &&
                   resource.data.userId == request.auth.uid;
    }

    // Allow access to teams collection at root level
    match /teams/{teamId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && 
                   isOrgMember(request.resource.data.organizationId);
      allow update: if isSignedIn() && 
                   isOrgMember(resource.data.organizationId);
      allow delete: if isSignedIn() && 
                   isOrgMember(resource.data.organizationId);
    }

    // Allow access to user profiles
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && userId == request.auth.uid;
      allow update: if isSignedIn() && userId == request.auth.uid;
      allow delete: if false;
    }

    // Allow access to organizations
    match /organizations/{orgId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && 
                   request.resource.data.ownerId == request.auth.uid &&
                   request.resource.data.members != null &&
                   request.auth.uid in request.resource.data.members;
      allow update: if isSignedIn() && 
                   (isOwner(resource.data.ownerId) || 
                   request.auth.uid in resource.data.members);
      allow delete: if false;
    }

    // Allow access to goals collection
    match /goals/{goalId} {
      allow read: if isSignedIn() && 
                 isOrgMember(resource.data.organizationId);
      allow create: if isSignedIn() && 
                   isOrgMember(request.resource.data.organizationId);
      allow update: if isSignedIn() && 
                   isOrgMember(resource.data.organizationId);
      allow delete: if isSignedIn() && 
                   isOrgMember(resource.data.organizationId);
    }
  }
}