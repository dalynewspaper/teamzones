rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(ownerId) {
      return isSignedIn() && request.auth.uid == ownerId;
    }

    function isOrgMember(orgId) {
      return isSignedIn() && 
             exists(/databases/$(database)/documents/organizations/$(orgId)) &&
             get(/databases/$(database)/documents/organizations/$(orgId)).data.members != null &&
             request.auth.uid in get(/databases/$(database)/documents/organizations/$(orgId)).data.members;
    }

    function hasMatchingDomain(orgId) {
      return isSignedIn() && 
             exists(/databases/$(database)/documents/organizations/$(orgId)) &&
             get(/databases/$(database)/documents/organizations/$(orgId)).data.domain == request.auth.token.email.split('@')[1];
    }

    // Allow access to videos collection with simplified rules
    match /videos/{videoId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && (
        resource.data.userId == request.auth.uid ||
        isOrgMember(resource.data.organizationId)
      );
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    // Allow access to teams collection at root level
    match /teams/{teamId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && 
                   isOrgMember(request.resource.data.organizationId);
      allow update: if isSignedIn() && 
                   isOrgMember(resource.data.organizationId);
      allow delete: if isSignedIn() && 
                   isOrgMember(resource.data.organizationId);
    }

    // Allow access to user profiles
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && userId == request.auth.uid;
      allow update: if isSignedIn() && userId == request.auth.uid;
      allow delete: if false;
    }

    // Allow access to organizations
    match /organizations/{orgId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && 
                   request.resource.data.ownerId == request.auth.uid &&
                   request.resource.data.members != null &&
                   request.auth.uid in request.resource.data.members;
      allow update: if isSignedIn() && (
        isOwner(resource.data.ownerId) || 
        // Allow users with matching domain to join
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members']) &&
        hasMatchingDomain(orgId) &&
        request.resource.data.members.hasAll(resource.data.members))
      );
      allow delete: if false;
    }

    // Allow access to goals collection
    match /goals/{goalId} {
      allow read: if isSignedIn() && 
                 isOrgMember(resource.data.organizationId);
      allow create: if isSignedIn() && 
                   isOrgMember(request.resource.data.organizationId);
      allow update: if isSignedIn() && 
                   isOrgMember(resource.data.organizationId);
      allow delete: if isSignedIn() && 
                   isOrgMember(resource.data.organizationId);
    }

    // Allow access to weeks collection
    match /weeks/{weekId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (
        request.resource.data.videos.size() == resource.data.videos.size() + 1 ||
        request.resource.data.updatedAt != resource.data.updatedAt
      );
    }

    // Allow access to invites collection
    match /invites/{inviteId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && 
                   isOrgMember(request.resource.data.organizationId);
      allow update: if isSignedIn() && 
                   isOrgMember(resource.data.organizationId);
      allow delete: if isSignedIn() && 
                   isOrgMember(resource.data.organizationId);
    }

    // Allow access to invite links collection
    match /inviteLinks/{linkId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && 
                   isOrgMember(request.resource.data.organizationId);
      allow update: if isSignedIn() && 
                   isOrgMember(resource.data.organizationId);
      allow delete: if isSignedIn() && 
                   isOrgMember(resource.data.organizationId);
    }
  }
}