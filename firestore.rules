rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOrgMember(orgId) {
      let org = get(/databases/$(database)/documents/organizations/$(orgId));
      return isSignedIn() && (
        !exists(/databases/$(database)/documents/organizations/$(orgId)) ||  // Allow if org doesn't exist yet
        (org.data.members is list && org.data.members.hasAny([request.auth.uid]))  // Check if user is in members array
      );
    }

    // User profiles
    match /users/{userId} {
      allow read, write: if isSignedIn();
    }

    // Organizations and their subcollections
    match /organizations/{orgId} {
      allow read, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && isOrgMember(orgId);

      // Teams subcollection
      match /teams/{teamId} {
        allow read, list: if isSignedIn() && isOrgMember(orgId);
        allow create: if isSignedIn() && isOrgMember(orgId);
        allow update, delete: if isSignedIn() && isOrgMember(orgId);
      }

      // Videos subcollection
      match /videos/{videoId} {
        allow read, list: if isSignedIn() && isOrgMember(orgId);
        allow create: if isSignedIn() && isOrgMember(orgId);
        allow update, delete: if isSignedIn() && isOrgMember(orgId);
      }
    }

    // Legacy collections - keeping for backward compatibility
    match /teams/{teamId} {
      allow read, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    match /videos/{videoId} {
      allow read, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    match /workspaces/{workspaceId} {
      allow read, write: if isSignedIn();
    }
  }
}